// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"slack-application/ent/userchannel"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// UserChannel is the model entity for the UserChannel schema.
type UserChannel struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int64 `json:"user_id,omitempty"`
	// ChannelID holds the value of the "channel_id" field.
	ChannelID int64 `json:"channel_id,omitempty"`
	// RoleType holds the value of the "role_type" field.
	RoleType string `json:"role_type,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserChannel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userchannel.FieldID, userchannel.FieldUserID, userchannel.FieldChannelID:
			values[i] = new(sql.NullInt64)
		case userchannel.FieldRoleType:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserChannel", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserChannel fields.
func (uc *UserChannel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userchannel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uc.ID = int(value.Int64)
		case userchannel.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				uc.UserID = value.Int64
			}
		case userchannel.FieldChannelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value.Valid {
				uc.ChannelID = value.Int64
			}
		case userchannel.FieldRoleType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_type", values[i])
			} else if value.Valid {
				uc.RoleType = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserChannel.
// Note that you need to call UserChannel.Unwrap() before calling this method if this UserChannel
// was returned from a transaction, and the transaction was committed or rolled back.
func (uc *UserChannel) Update() *UserChannelUpdateOne {
	return NewUserChannelClient(uc.config).UpdateOne(uc)
}

// Unwrap unwraps the UserChannel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uc *UserChannel) Unwrap() *UserChannel {
	_tx, ok := uc.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserChannel is not a transactional entity")
	}
	uc.config.driver = _tx.drv
	return uc
}

// String implements the fmt.Stringer.
func (uc *UserChannel) String() string {
	var builder strings.Builder
	builder.WriteString("UserChannel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uc.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", uc.UserID))
	builder.WriteString(", ")
	builder.WriteString("channel_id=")
	builder.WriteString(fmt.Sprintf("%v", uc.ChannelID))
	builder.WriteString(", ")
	builder.WriteString("role_type=")
	builder.WriteString(uc.RoleType)
	builder.WriteByte(')')
	return builder.String()
}

// UserChannels is a parsable slice of UserChannel.
type UserChannels []*UserChannel
