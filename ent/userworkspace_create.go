// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"slack-application/ent/userworkspace"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserWorkspaceCreate is the builder for creating a UserWorkspace entity.
type UserWorkspaceCreate struct {
	config
	mutation *UserWorkspaceMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (uwc *UserWorkspaceCreate) SetUserID(i int64) *UserWorkspaceCreate {
	uwc.mutation.SetUserID(i)
	return uwc
}

// SetWorkspaceID sets the "workspace_id" field.
func (uwc *UserWorkspaceCreate) SetWorkspaceID(i int64) *UserWorkspaceCreate {
	uwc.mutation.SetWorkspaceID(i)
	return uwc
}

// SetRoleType sets the "role_type" field.
func (uwc *UserWorkspaceCreate) SetRoleType(s string) *UserWorkspaceCreate {
	uwc.mutation.SetRoleType(s)
	return uwc
}

// Mutation returns the UserWorkspaceMutation object of the builder.
func (uwc *UserWorkspaceCreate) Mutation() *UserWorkspaceMutation {
	return uwc.mutation
}

// Save creates the UserWorkspace in the database.
func (uwc *UserWorkspaceCreate) Save(ctx context.Context) (*UserWorkspace, error) {
	return withHooks[*UserWorkspace, UserWorkspaceMutation](ctx, uwc.sqlSave, uwc.mutation, uwc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uwc *UserWorkspaceCreate) SaveX(ctx context.Context) *UserWorkspace {
	v, err := uwc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uwc *UserWorkspaceCreate) Exec(ctx context.Context) error {
	_, err := uwc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uwc *UserWorkspaceCreate) ExecX(ctx context.Context) {
	if err := uwc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uwc *UserWorkspaceCreate) check() error {
	if _, ok := uwc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserWorkspace.user_id"`)}
	}
	if _, ok := uwc.mutation.WorkspaceID(); !ok {
		return &ValidationError{Name: "workspace_id", err: errors.New(`ent: missing required field "UserWorkspace.workspace_id"`)}
	}
	if _, ok := uwc.mutation.RoleType(); !ok {
		return &ValidationError{Name: "role_type", err: errors.New(`ent: missing required field "UserWorkspace.role_type"`)}
	}
	return nil
}

func (uwc *UserWorkspaceCreate) sqlSave(ctx context.Context) (*UserWorkspace, error) {
	if err := uwc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uwc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uwc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uwc.mutation.id = &_node.ID
	uwc.mutation.done = true
	return _node, nil
}

func (uwc *UserWorkspaceCreate) createSpec() (*UserWorkspace, *sqlgraph.CreateSpec) {
	var (
		_node = &UserWorkspace{config: uwc.config}
		_spec = sqlgraph.NewCreateSpec(userworkspace.Table, sqlgraph.NewFieldSpec(userworkspace.FieldID, field.TypeInt))
	)
	if value, ok := uwc.mutation.UserID(); ok {
		_spec.SetField(userworkspace.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := uwc.mutation.WorkspaceID(); ok {
		_spec.SetField(userworkspace.FieldWorkspaceID, field.TypeInt64, value)
		_node.WorkspaceID = value
	}
	if value, ok := uwc.mutation.RoleType(); ok {
		_spec.SetField(userworkspace.FieldRoleType, field.TypeString, value)
		_node.RoleType = value
	}
	return _node, _spec
}

// UserWorkspaceCreateBulk is the builder for creating many UserWorkspace entities in bulk.
type UserWorkspaceCreateBulk struct {
	config
	builders []*UserWorkspaceCreate
}

// Save creates the UserWorkspace entities in the database.
func (uwcb *UserWorkspaceCreateBulk) Save(ctx context.Context) ([]*UserWorkspace, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uwcb.builders))
	nodes := make([]*UserWorkspace, len(uwcb.builders))
	mutators := make([]Mutator, len(uwcb.builders))
	for i := range uwcb.builders {
		func(i int, root context.Context) {
			builder := uwcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserWorkspaceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uwcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uwcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uwcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uwcb *UserWorkspaceCreateBulk) SaveX(ctx context.Context) []*UserWorkspace {
	v, err := uwcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uwcb *UserWorkspaceCreateBulk) Exec(ctx context.Context) error {
	_, err := uwcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uwcb *UserWorkspaceCreateBulk) ExecX(ctx context.Context) {
	if err := uwcb.Exec(ctx); err != nil {
		panic(err)
	}
}
