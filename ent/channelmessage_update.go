// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"slack-application/ent/channelmessage"
	"slack-application/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChannelMessageUpdate is the builder for updating ChannelMessage entities.
type ChannelMessageUpdate struct {
	config
	hooks    []Hook
	mutation *ChannelMessageMutation
}

// Where appends a list predicates to the ChannelMessageUpdate builder.
func (cmu *ChannelMessageUpdate) Where(ps ...predicate.ChannelMessage) *ChannelMessageUpdate {
	cmu.mutation.Where(ps...)
	return cmu
}

// SetMessageIds sets the "messageIds" field.
func (cmu *ChannelMessageUpdate) SetMessageIds(s string) *ChannelMessageUpdate {
	cmu.mutation.SetMessageIds(s)
	return cmu
}

// SetCreatedAt sets the "created_at" field.
func (cmu *ChannelMessageUpdate) SetCreatedAt(t time.Time) *ChannelMessageUpdate {
	cmu.mutation.SetCreatedAt(t)
	return cmu
}

// Mutation returns the ChannelMessageMutation object of the builder.
func (cmu *ChannelMessageUpdate) Mutation() *ChannelMessageMutation {
	return cmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmu *ChannelMessageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ChannelMessageMutation](ctx, cmu.sqlSave, cmu.mutation, cmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmu *ChannelMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := cmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmu *ChannelMessageUpdate) Exec(ctx context.Context) error {
	_, err := cmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmu *ChannelMessageUpdate) ExecX(ctx context.Context) {
	if err := cmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cmu *ChannelMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(channelmessage.Table, channelmessage.Columns, sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeInt))
	if ps := cmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmu.mutation.MessageIds(); ok {
		_spec.SetField(channelmessage.FieldMessageIds, field.TypeString, value)
	}
	if value, ok := cmu.mutation.CreatedAt(); ok {
		_spec.SetField(channelmessage.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{channelmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cmu.mutation.done = true
	return n, nil
}

// ChannelMessageUpdateOne is the builder for updating a single ChannelMessage entity.
type ChannelMessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChannelMessageMutation
}

// SetMessageIds sets the "messageIds" field.
func (cmuo *ChannelMessageUpdateOne) SetMessageIds(s string) *ChannelMessageUpdateOne {
	cmuo.mutation.SetMessageIds(s)
	return cmuo
}

// SetCreatedAt sets the "created_at" field.
func (cmuo *ChannelMessageUpdateOne) SetCreatedAt(t time.Time) *ChannelMessageUpdateOne {
	cmuo.mutation.SetCreatedAt(t)
	return cmuo
}

// Mutation returns the ChannelMessageMutation object of the builder.
func (cmuo *ChannelMessageUpdateOne) Mutation() *ChannelMessageMutation {
	return cmuo.mutation
}

// Where appends a list predicates to the ChannelMessageUpdate builder.
func (cmuo *ChannelMessageUpdateOne) Where(ps ...predicate.ChannelMessage) *ChannelMessageUpdateOne {
	cmuo.mutation.Where(ps...)
	return cmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmuo *ChannelMessageUpdateOne) Select(field string, fields ...string) *ChannelMessageUpdateOne {
	cmuo.fields = append([]string{field}, fields...)
	return cmuo
}

// Save executes the query and returns the updated ChannelMessage entity.
func (cmuo *ChannelMessageUpdateOne) Save(ctx context.Context) (*ChannelMessage, error) {
	return withHooks[*ChannelMessage, ChannelMessageMutation](ctx, cmuo.sqlSave, cmuo.mutation, cmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmuo *ChannelMessageUpdateOne) SaveX(ctx context.Context) *ChannelMessage {
	node, err := cmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmuo *ChannelMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := cmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmuo *ChannelMessageUpdateOne) ExecX(ctx context.Context) {
	if err := cmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cmuo *ChannelMessageUpdateOne) sqlSave(ctx context.Context) (_node *ChannelMessage, err error) {
	_spec := sqlgraph.NewUpdateSpec(channelmessage.Table, channelmessage.Columns, sqlgraph.NewFieldSpec(channelmessage.FieldID, field.TypeInt))
	id, ok := cmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChannelMessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, channelmessage.FieldID)
		for _, f := range fields {
			if !channelmessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != channelmessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmuo.mutation.MessageIds(); ok {
		_spec.SetField(channelmessage.FieldMessageIds, field.TypeString, value)
	}
	if value, ok := cmuo.mutation.CreatedAt(); ok {
		_spec.SetField(channelmessage.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &ChannelMessage{config: cmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{channelmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cmuo.mutation.done = true
	return _node, nil
}
