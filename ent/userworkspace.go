// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"slack-application/ent/userworkspace"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// UserWorkspace is the model entity for the UserWorkspace schema.
type UserWorkspace struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int64 `json:"user_id,omitempty"`
	// WorkspaceID holds the value of the "workspace_id" field.
	WorkspaceID int64 `json:"workspace_id,omitempty"`
	// RoleType holds the value of the "role_type" field.
	RoleType string `json:"role_type,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserWorkspace) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userworkspace.FieldID, userworkspace.FieldUserID, userworkspace.FieldWorkspaceID:
			values[i] = new(sql.NullInt64)
		case userworkspace.FieldRoleType:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserWorkspace", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserWorkspace fields.
func (uw *UserWorkspace) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userworkspace.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uw.ID = int(value.Int64)
		case userworkspace.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				uw.UserID = value.Int64
			}
		case userworkspace.FieldWorkspaceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field workspace_id", values[i])
			} else if value.Valid {
				uw.WorkspaceID = value.Int64
			}
		case userworkspace.FieldRoleType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_type", values[i])
			} else if value.Valid {
				uw.RoleType = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserWorkspace.
// Note that you need to call UserWorkspace.Unwrap() before calling this method if this UserWorkspace
// was returned from a transaction, and the transaction was committed or rolled back.
func (uw *UserWorkspace) Update() *UserWorkspaceUpdateOne {
	return NewUserWorkspaceClient(uw.config).UpdateOne(uw)
}

// Unwrap unwraps the UserWorkspace entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uw *UserWorkspace) Unwrap() *UserWorkspace {
	_tx, ok := uw.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserWorkspace is not a transactional entity")
	}
	uw.config.driver = _tx.drv
	return uw
}

// String implements the fmt.Stringer.
func (uw *UserWorkspace) String() string {
	var builder strings.Builder
	builder.WriteString("UserWorkspace(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uw.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", uw.UserID))
	builder.WriteString(", ")
	builder.WriteString("workspace_id=")
	builder.WriteString(fmt.Sprintf("%v", uw.WorkspaceID))
	builder.WriteString(", ")
	builder.WriteString("role_type=")
	builder.WriteString(uw.RoleType)
	builder.WriteByte(')')
	return builder.String()
}

// UserWorkspaces is a parsable slice of UserWorkspace.
type UserWorkspaces []*UserWorkspace
