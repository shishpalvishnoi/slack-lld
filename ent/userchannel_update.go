// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"slack-application/ent/predicate"
	"slack-application/ent/userchannel"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserChannelUpdate is the builder for updating UserChannel entities.
type UserChannelUpdate struct {
	config
	hooks    []Hook
	mutation *UserChannelMutation
}

// Where appends a list predicates to the UserChannelUpdate builder.
func (ucu *UserChannelUpdate) Where(ps ...predicate.UserChannel) *UserChannelUpdate {
	ucu.mutation.Where(ps...)
	return ucu
}

// SetUserID sets the "user_id" field.
func (ucu *UserChannelUpdate) SetUserID(i int64) *UserChannelUpdate {
	ucu.mutation.ResetUserID()
	ucu.mutation.SetUserID(i)
	return ucu
}

// AddUserID adds i to the "user_id" field.
func (ucu *UserChannelUpdate) AddUserID(i int64) *UserChannelUpdate {
	ucu.mutation.AddUserID(i)
	return ucu
}

// SetChannelID sets the "channel_id" field.
func (ucu *UserChannelUpdate) SetChannelID(i int64) *UserChannelUpdate {
	ucu.mutation.ResetChannelID()
	ucu.mutation.SetChannelID(i)
	return ucu
}

// AddChannelID adds i to the "channel_id" field.
func (ucu *UserChannelUpdate) AddChannelID(i int64) *UserChannelUpdate {
	ucu.mutation.AddChannelID(i)
	return ucu
}

// SetRoleType sets the "role_type" field.
func (ucu *UserChannelUpdate) SetRoleType(s string) *UserChannelUpdate {
	ucu.mutation.SetRoleType(s)
	return ucu
}

// Mutation returns the UserChannelMutation object of the builder.
func (ucu *UserChannelUpdate) Mutation() *UserChannelMutation {
	return ucu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ucu *UserChannelUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UserChannelMutation](ctx, ucu.sqlSave, ucu.mutation, ucu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucu *UserChannelUpdate) SaveX(ctx context.Context) int {
	affected, err := ucu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ucu *UserChannelUpdate) Exec(ctx context.Context) error {
	_, err := ucu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucu *UserChannelUpdate) ExecX(ctx context.Context) {
	if err := ucu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ucu *UserChannelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userchannel.Table, userchannel.Columns, sqlgraph.NewFieldSpec(userchannel.FieldID, field.TypeInt))
	if ps := ucu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucu.mutation.UserID(); ok {
		_spec.SetField(userchannel.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := ucu.mutation.AddedUserID(); ok {
		_spec.AddField(userchannel.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := ucu.mutation.ChannelID(); ok {
		_spec.SetField(userchannel.FieldChannelID, field.TypeInt64, value)
	}
	if value, ok := ucu.mutation.AddedChannelID(); ok {
		_spec.AddField(userchannel.FieldChannelID, field.TypeInt64, value)
	}
	if value, ok := ucu.mutation.RoleType(); ok {
		_spec.SetField(userchannel.FieldRoleType, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ucu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ucu.mutation.done = true
	return n, nil
}

// UserChannelUpdateOne is the builder for updating a single UserChannel entity.
type UserChannelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserChannelMutation
}

// SetUserID sets the "user_id" field.
func (ucuo *UserChannelUpdateOne) SetUserID(i int64) *UserChannelUpdateOne {
	ucuo.mutation.ResetUserID()
	ucuo.mutation.SetUserID(i)
	return ucuo
}

// AddUserID adds i to the "user_id" field.
func (ucuo *UserChannelUpdateOne) AddUserID(i int64) *UserChannelUpdateOne {
	ucuo.mutation.AddUserID(i)
	return ucuo
}

// SetChannelID sets the "channel_id" field.
func (ucuo *UserChannelUpdateOne) SetChannelID(i int64) *UserChannelUpdateOne {
	ucuo.mutation.ResetChannelID()
	ucuo.mutation.SetChannelID(i)
	return ucuo
}

// AddChannelID adds i to the "channel_id" field.
func (ucuo *UserChannelUpdateOne) AddChannelID(i int64) *UserChannelUpdateOne {
	ucuo.mutation.AddChannelID(i)
	return ucuo
}

// SetRoleType sets the "role_type" field.
func (ucuo *UserChannelUpdateOne) SetRoleType(s string) *UserChannelUpdateOne {
	ucuo.mutation.SetRoleType(s)
	return ucuo
}

// Mutation returns the UserChannelMutation object of the builder.
func (ucuo *UserChannelUpdateOne) Mutation() *UserChannelMutation {
	return ucuo.mutation
}

// Where appends a list predicates to the UserChannelUpdate builder.
func (ucuo *UserChannelUpdateOne) Where(ps ...predicate.UserChannel) *UserChannelUpdateOne {
	ucuo.mutation.Where(ps...)
	return ucuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ucuo *UserChannelUpdateOne) Select(field string, fields ...string) *UserChannelUpdateOne {
	ucuo.fields = append([]string{field}, fields...)
	return ucuo
}

// Save executes the query and returns the updated UserChannel entity.
func (ucuo *UserChannelUpdateOne) Save(ctx context.Context) (*UserChannel, error) {
	return withHooks[*UserChannel, UserChannelMutation](ctx, ucuo.sqlSave, ucuo.mutation, ucuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucuo *UserChannelUpdateOne) SaveX(ctx context.Context) *UserChannel {
	node, err := ucuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ucuo *UserChannelUpdateOne) Exec(ctx context.Context) error {
	_, err := ucuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucuo *UserChannelUpdateOne) ExecX(ctx context.Context) {
	if err := ucuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ucuo *UserChannelUpdateOne) sqlSave(ctx context.Context) (_node *UserChannel, err error) {
	_spec := sqlgraph.NewUpdateSpec(userchannel.Table, userchannel.Columns, sqlgraph.NewFieldSpec(userchannel.FieldID, field.TypeInt))
	id, ok := ucuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserChannel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ucuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userchannel.FieldID)
		for _, f := range fields {
			if !userchannel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userchannel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ucuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucuo.mutation.UserID(); ok {
		_spec.SetField(userchannel.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := ucuo.mutation.AddedUserID(); ok {
		_spec.AddField(userchannel.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := ucuo.mutation.ChannelID(); ok {
		_spec.SetField(userchannel.FieldChannelID, field.TypeInt64, value)
	}
	if value, ok := ucuo.mutation.AddedChannelID(); ok {
		_spec.AddField(userchannel.FieldChannelID, field.TypeInt64, value)
	}
	if value, ok := ucuo.mutation.RoleType(); ok {
		_spec.SetField(userchannel.FieldRoleType, field.TypeString, value)
	}
	_node = &UserChannel{config: ucuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ucuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ucuo.mutation.done = true
	return _node, nil
}
