// Code generated by ent, DO NOT EDIT.

package channelmessage

import (
	"slack-application/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldLTE(FieldID, id))
}

// MessageIds applies equality check predicate on the "messageIds" field. It's identical to MessageIdsEQ.
func MessageIds(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldMessageIds, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldCreatedAt, v))
}

// MessageIdsEQ applies the EQ predicate on the "messageIds" field.
func MessageIdsEQ(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldMessageIds, v))
}

// MessageIdsNEQ applies the NEQ predicate on the "messageIds" field.
func MessageIdsNEQ(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNEQ(FieldMessageIds, v))
}

// MessageIdsIn applies the In predicate on the "messageIds" field.
func MessageIdsIn(vs ...string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldIn(FieldMessageIds, vs...))
}

// MessageIdsNotIn applies the NotIn predicate on the "messageIds" field.
func MessageIdsNotIn(vs ...string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNotIn(FieldMessageIds, vs...))
}

// MessageIdsGT applies the GT predicate on the "messageIds" field.
func MessageIdsGT(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldGT(FieldMessageIds, v))
}

// MessageIdsGTE applies the GTE predicate on the "messageIds" field.
func MessageIdsGTE(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldGTE(FieldMessageIds, v))
}

// MessageIdsLT applies the LT predicate on the "messageIds" field.
func MessageIdsLT(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldLT(FieldMessageIds, v))
}

// MessageIdsLTE applies the LTE predicate on the "messageIds" field.
func MessageIdsLTE(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldLTE(FieldMessageIds, v))
}

// MessageIdsContains applies the Contains predicate on the "messageIds" field.
func MessageIdsContains(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldContains(FieldMessageIds, v))
}

// MessageIdsHasPrefix applies the HasPrefix predicate on the "messageIds" field.
func MessageIdsHasPrefix(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldHasPrefix(FieldMessageIds, v))
}

// MessageIdsHasSuffix applies the HasSuffix predicate on the "messageIds" field.
func MessageIdsHasSuffix(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldHasSuffix(FieldMessageIds, v))
}

// MessageIdsEqualFold applies the EqualFold predicate on the "messageIds" field.
func MessageIdsEqualFold(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEqualFold(FieldMessageIds, v))
}

// MessageIdsContainsFold applies the ContainsFold predicate on the "messageIds" field.
func MessageIdsContainsFold(v string) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldContainsFold(FieldMessageIds, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ChannelMessage) predicate.ChannelMessage {
	return predicate.ChannelMessage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ChannelMessage) predicate.ChannelMessage {
	return predicate.ChannelMessage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ChannelMessage) predicate.ChannelMessage {
	return predicate.ChannelMessage(func(s *sql.Selector) {
		p(s.Not())
	})
}
