// Code generated by ent, DO NOT EDIT.

package channelmessage

import (
	"slack-application/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"github.com/jackc/pgtype"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldLTE(FieldID, id))
}

// PostgresArrayCol applies equality check predicate on the "postgres_array_col" field. It's identical to PostgresArrayColEQ.
func PostgresArrayCol(v *pgtype.Int4Array) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldPostgresArrayCol, v))
}

// PostgresArrayColEQ applies the EQ predicate on the "postgres_array_col" field.
func PostgresArrayColEQ(v *pgtype.Int4Array) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldEQ(FieldPostgresArrayCol, v))
}

// PostgresArrayColNEQ applies the NEQ predicate on the "postgres_array_col" field.
func PostgresArrayColNEQ(v *pgtype.Int4Array) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNEQ(FieldPostgresArrayCol, v))
}

// PostgresArrayColIn applies the In predicate on the "postgres_array_col" field.
func PostgresArrayColIn(vs ...*pgtype.Int4Array) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldIn(FieldPostgresArrayCol, vs...))
}

// PostgresArrayColNotIn applies the NotIn predicate on the "postgres_array_col" field.
func PostgresArrayColNotIn(vs ...*pgtype.Int4Array) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldNotIn(FieldPostgresArrayCol, vs...))
}

// PostgresArrayColGT applies the GT predicate on the "postgres_array_col" field.
func PostgresArrayColGT(v *pgtype.Int4Array) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldGT(FieldPostgresArrayCol, v))
}

// PostgresArrayColGTE applies the GTE predicate on the "postgres_array_col" field.
func PostgresArrayColGTE(v *pgtype.Int4Array) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldGTE(FieldPostgresArrayCol, v))
}

// PostgresArrayColLT applies the LT predicate on the "postgres_array_col" field.
func PostgresArrayColLT(v *pgtype.Int4Array) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldLT(FieldPostgresArrayCol, v))
}

// PostgresArrayColLTE applies the LTE predicate on the "postgres_array_col" field.
func PostgresArrayColLTE(v *pgtype.Int4Array) predicate.ChannelMessage {
	return predicate.ChannelMessage(sql.FieldLTE(FieldPostgresArrayCol, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ChannelMessage) predicate.ChannelMessage {
	return predicate.ChannelMessage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ChannelMessage) predicate.ChannelMessage {
	return predicate.ChannelMessage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ChannelMessage) predicate.ChannelMessage {
	return predicate.ChannelMessage(func(s *sql.Selector) {
		p(s.Not())
	})
}
