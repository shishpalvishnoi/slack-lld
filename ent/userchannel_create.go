// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"slack-application/ent/userchannel"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserChannelCreate is the builder for creating a UserChannel entity.
type UserChannelCreate struct {
	config
	mutation *UserChannelMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (ucc *UserChannelCreate) SetUserID(i int64) *UserChannelCreate {
	ucc.mutation.SetUserID(i)
	return ucc
}

// SetChannelID sets the "channel_id" field.
func (ucc *UserChannelCreate) SetChannelID(i int64) *UserChannelCreate {
	ucc.mutation.SetChannelID(i)
	return ucc
}

// SetRoleType sets the "role_type" field.
func (ucc *UserChannelCreate) SetRoleType(s string) *UserChannelCreate {
	ucc.mutation.SetRoleType(s)
	return ucc
}

// Mutation returns the UserChannelMutation object of the builder.
func (ucc *UserChannelCreate) Mutation() *UserChannelMutation {
	return ucc.mutation
}

// Save creates the UserChannel in the database.
func (ucc *UserChannelCreate) Save(ctx context.Context) (*UserChannel, error) {
	return withHooks[*UserChannel, UserChannelMutation](ctx, ucc.sqlSave, ucc.mutation, ucc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ucc *UserChannelCreate) SaveX(ctx context.Context) *UserChannel {
	v, err := ucc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucc *UserChannelCreate) Exec(ctx context.Context) error {
	_, err := ucc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucc *UserChannelCreate) ExecX(ctx context.Context) {
	if err := ucc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucc *UserChannelCreate) check() error {
	if _, ok := ucc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserChannel.user_id"`)}
	}
	if _, ok := ucc.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel_id", err: errors.New(`ent: missing required field "UserChannel.channel_id"`)}
	}
	if _, ok := ucc.mutation.RoleType(); !ok {
		return &ValidationError{Name: "role_type", err: errors.New(`ent: missing required field "UserChannel.role_type"`)}
	}
	return nil
}

func (ucc *UserChannelCreate) sqlSave(ctx context.Context) (*UserChannel, error) {
	if err := ucc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ucc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ucc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ucc.mutation.id = &_node.ID
	ucc.mutation.done = true
	return _node, nil
}

func (ucc *UserChannelCreate) createSpec() (*UserChannel, *sqlgraph.CreateSpec) {
	var (
		_node = &UserChannel{config: ucc.config}
		_spec = sqlgraph.NewCreateSpec(userchannel.Table, sqlgraph.NewFieldSpec(userchannel.FieldID, field.TypeInt))
	)
	if value, ok := ucc.mutation.UserID(); ok {
		_spec.SetField(userchannel.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := ucc.mutation.ChannelID(); ok {
		_spec.SetField(userchannel.FieldChannelID, field.TypeInt64, value)
		_node.ChannelID = value
	}
	if value, ok := ucc.mutation.RoleType(); ok {
		_spec.SetField(userchannel.FieldRoleType, field.TypeString, value)
		_node.RoleType = value
	}
	return _node, _spec
}

// UserChannelCreateBulk is the builder for creating many UserChannel entities in bulk.
type UserChannelCreateBulk struct {
	config
	builders []*UserChannelCreate
}

// Save creates the UserChannel entities in the database.
func (uccb *UserChannelCreateBulk) Save(ctx context.Context) ([]*UserChannel, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uccb.builders))
	nodes := make([]*UserChannel, len(uccb.builders))
	mutators := make([]Mutator, len(uccb.builders))
	for i := range uccb.builders {
		func(i int, root context.Context) {
			builder := uccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserChannelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uccb *UserChannelCreateBulk) SaveX(ctx context.Context) []*UserChannel {
	v, err := uccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uccb *UserChannelCreateBulk) Exec(ctx context.Context) error {
	_, err := uccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uccb *UserChannelCreateBulk) ExecX(ctx context.Context) {
	if err := uccb.Exec(ctx); err != nil {
		panic(err)
	}
}
