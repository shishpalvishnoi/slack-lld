// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"slack-application/ent/channelmessage"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ChannelMessage is the model entity for the ChannelMessage schema.
type ChannelMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MessageIds holds the value of the "messageIds" field.
	MessageIds string `json:"messageIds,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChannelMessage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case channelmessage.FieldID:
			values[i] = new(sql.NullInt64)
		case channelmessage.FieldMessageIds:
			values[i] = new(sql.NullString)
		case channelmessage.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ChannelMessage", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChannelMessage fields.
func (cm *ChannelMessage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case channelmessage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cm.ID = int(value.Int64)
		case channelmessage.FieldMessageIds:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field messageIds", values[i])
			} else if value.Valid {
				cm.MessageIds = value.String
			}
		case channelmessage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cm.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ChannelMessage.
// Note that you need to call ChannelMessage.Unwrap() before calling this method if this ChannelMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (cm *ChannelMessage) Update() *ChannelMessageUpdateOne {
	return NewChannelMessageClient(cm.config).UpdateOne(cm)
}

// Unwrap unwraps the ChannelMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cm *ChannelMessage) Unwrap() *ChannelMessage {
	_tx, ok := cm.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChannelMessage is not a transactional entity")
	}
	cm.config.driver = _tx.drv
	return cm
}

// String implements the fmt.Stringer.
func (cm *ChannelMessage) String() string {
	var builder strings.Builder
	builder.WriteString("ChannelMessage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cm.ID))
	builder.WriteString("messageIds=")
	builder.WriteString(cm.MessageIds)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cm.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ChannelMessages is a parsable slice of ChannelMessage.
type ChannelMessages []*ChannelMessage
