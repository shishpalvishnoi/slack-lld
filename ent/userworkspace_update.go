// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"slack-application/ent/predicate"
	"slack-application/ent/userworkspace"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserWorkspaceUpdate is the builder for updating UserWorkspace entities.
type UserWorkspaceUpdate struct {
	config
	hooks    []Hook
	mutation *UserWorkspaceMutation
}

// Where appends a list predicates to the UserWorkspaceUpdate builder.
func (uwu *UserWorkspaceUpdate) Where(ps ...predicate.UserWorkspace) *UserWorkspaceUpdate {
	uwu.mutation.Where(ps...)
	return uwu
}

// SetUserID sets the "user_id" field.
func (uwu *UserWorkspaceUpdate) SetUserID(i int64) *UserWorkspaceUpdate {
	uwu.mutation.ResetUserID()
	uwu.mutation.SetUserID(i)
	return uwu
}

// AddUserID adds i to the "user_id" field.
func (uwu *UserWorkspaceUpdate) AddUserID(i int64) *UserWorkspaceUpdate {
	uwu.mutation.AddUserID(i)
	return uwu
}

// SetWorkspaceID sets the "workspace_id" field.
func (uwu *UserWorkspaceUpdate) SetWorkspaceID(i int64) *UserWorkspaceUpdate {
	uwu.mutation.ResetWorkspaceID()
	uwu.mutation.SetWorkspaceID(i)
	return uwu
}

// AddWorkspaceID adds i to the "workspace_id" field.
func (uwu *UserWorkspaceUpdate) AddWorkspaceID(i int64) *UserWorkspaceUpdate {
	uwu.mutation.AddWorkspaceID(i)
	return uwu
}

// SetRoleType sets the "role_type" field.
func (uwu *UserWorkspaceUpdate) SetRoleType(s string) *UserWorkspaceUpdate {
	uwu.mutation.SetRoleType(s)
	return uwu
}

// Mutation returns the UserWorkspaceMutation object of the builder.
func (uwu *UserWorkspaceUpdate) Mutation() *UserWorkspaceMutation {
	return uwu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uwu *UserWorkspaceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UserWorkspaceMutation](ctx, uwu.sqlSave, uwu.mutation, uwu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uwu *UserWorkspaceUpdate) SaveX(ctx context.Context) int {
	affected, err := uwu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uwu *UserWorkspaceUpdate) Exec(ctx context.Context) error {
	_, err := uwu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uwu *UserWorkspaceUpdate) ExecX(ctx context.Context) {
	if err := uwu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uwu *UserWorkspaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userworkspace.Table, userworkspace.Columns, sqlgraph.NewFieldSpec(userworkspace.FieldID, field.TypeInt))
	if ps := uwu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uwu.mutation.UserID(); ok {
		_spec.SetField(userworkspace.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := uwu.mutation.AddedUserID(); ok {
		_spec.AddField(userworkspace.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := uwu.mutation.WorkspaceID(); ok {
		_spec.SetField(userworkspace.FieldWorkspaceID, field.TypeInt64, value)
	}
	if value, ok := uwu.mutation.AddedWorkspaceID(); ok {
		_spec.AddField(userworkspace.FieldWorkspaceID, field.TypeInt64, value)
	}
	if value, ok := uwu.mutation.RoleType(); ok {
		_spec.SetField(userworkspace.FieldRoleType, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uwu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userworkspace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uwu.mutation.done = true
	return n, nil
}

// UserWorkspaceUpdateOne is the builder for updating a single UserWorkspace entity.
type UserWorkspaceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserWorkspaceMutation
}

// SetUserID sets the "user_id" field.
func (uwuo *UserWorkspaceUpdateOne) SetUserID(i int64) *UserWorkspaceUpdateOne {
	uwuo.mutation.ResetUserID()
	uwuo.mutation.SetUserID(i)
	return uwuo
}

// AddUserID adds i to the "user_id" field.
func (uwuo *UserWorkspaceUpdateOne) AddUserID(i int64) *UserWorkspaceUpdateOne {
	uwuo.mutation.AddUserID(i)
	return uwuo
}

// SetWorkspaceID sets the "workspace_id" field.
func (uwuo *UserWorkspaceUpdateOne) SetWorkspaceID(i int64) *UserWorkspaceUpdateOne {
	uwuo.mutation.ResetWorkspaceID()
	uwuo.mutation.SetWorkspaceID(i)
	return uwuo
}

// AddWorkspaceID adds i to the "workspace_id" field.
func (uwuo *UserWorkspaceUpdateOne) AddWorkspaceID(i int64) *UserWorkspaceUpdateOne {
	uwuo.mutation.AddWorkspaceID(i)
	return uwuo
}

// SetRoleType sets the "role_type" field.
func (uwuo *UserWorkspaceUpdateOne) SetRoleType(s string) *UserWorkspaceUpdateOne {
	uwuo.mutation.SetRoleType(s)
	return uwuo
}

// Mutation returns the UserWorkspaceMutation object of the builder.
func (uwuo *UserWorkspaceUpdateOne) Mutation() *UserWorkspaceMutation {
	return uwuo.mutation
}

// Where appends a list predicates to the UserWorkspaceUpdate builder.
func (uwuo *UserWorkspaceUpdateOne) Where(ps ...predicate.UserWorkspace) *UserWorkspaceUpdateOne {
	uwuo.mutation.Where(ps...)
	return uwuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uwuo *UserWorkspaceUpdateOne) Select(field string, fields ...string) *UserWorkspaceUpdateOne {
	uwuo.fields = append([]string{field}, fields...)
	return uwuo
}

// Save executes the query and returns the updated UserWorkspace entity.
func (uwuo *UserWorkspaceUpdateOne) Save(ctx context.Context) (*UserWorkspace, error) {
	return withHooks[*UserWorkspace, UserWorkspaceMutation](ctx, uwuo.sqlSave, uwuo.mutation, uwuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uwuo *UserWorkspaceUpdateOne) SaveX(ctx context.Context) *UserWorkspace {
	node, err := uwuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uwuo *UserWorkspaceUpdateOne) Exec(ctx context.Context) error {
	_, err := uwuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uwuo *UserWorkspaceUpdateOne) ExecX(ctx context.Context) {
	if err := uwuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uwuo *UserWorkspaceUpdateOne) sqlSave(ctx context.Context) (_node *UserWorkspace, err error) {
	_spec := sqlgraph.NewUpdateSpec(userworkspace.Table, userworkspace.Columns, sqlgraph.NewFieldSpec(userworkspace.FieldID, field.TypeInt))
	id, ok := uwuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserWorkspace.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uwuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userworkspace.FieldID)
		for _, f := range fields {
			if !userworkspace.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userworkspace.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uwuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uwuo.mutation.UserID(); ok {
		_spec.SetField(userworkspace.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := uwuo.mutation.AddedUserID(); ok {
		_spec.AddField(userworkspace.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := uwuo.mutation.WorkspaceID(); ok {
		_spec.SetField(userworkspace.FieldWorkspaceID, field.TypeInt64, value)
	}
	if value, ok := uwuo.mutation.AddedWorkspaceID(); ok {
		_spec.AddField(userworkspace.FieldWorkspaceID, field.TypeInt64, value)
	}
	if value, ok := uwuo.mutation.RoleType(); ok {
		_spec.SetField(userworkspace.FieldRoleType, field.TypeString, value)
	}
	_node = &UserWorkspace{config: uwuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uwuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userworkspace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uwuo.mutation.done = true
	return _node, nil
}
