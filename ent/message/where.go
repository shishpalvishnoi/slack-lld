// Code generated by ent, DO NOT EDIT.

package message

import (
	"slack-application/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldID, id))
}

// Data applies equality check predicate on the "data" field. It's identical to DataEQ.
func Data(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldData, v))
}

// Attachment applies equality check predicate on the "attachment" field. It's identical to AttachmentEQ.
func Attachment(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldAttachment, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldUserID, v))
}

// WorkspaceID applies equality check predicate on the "workspace_id" field. It's identical to WorkspaceIDEQ.
func WorkspaceID(v int64) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldWorkspaceID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCreatedAt, v))
}

// DataEQ applies the EQ predicate on the "data" field.
func DataEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldData, v))
}

// DataNEQ applies the NEQ predicate on the "data" field.
func DataNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldData, v))
}

// DataIn applies the In predicate on the "data" field.
func DataIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldData, vs...))
}

// DataNotIn applies the NotIn predicate on the "data" field.
func DataNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldData, vs...))
}

// DataGT applies the GT predicate on the "data" field.
func DataGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldData, v))
}

// DataGTE applies the GTE predicate on the "data" field.
func DataGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldData, v))
}

// DataLT applies the LT predicate on the "data" field.
func DataLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldData, v))
}

// DataLTE applies the LTE predicate on the "data" field.
func DataLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldData, v))
}

// DataContains applies the Contains predicate on the "data" field.
func DataContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldData, v))
}

// DataHasPrefix applies the HasPrefix predicate on the "data" field.
func DataHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldData, v))
}

// DataHasSuffix applies the HasSuffix predicate on the "data" field.
func DataHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldData, v))
}

// DataEqualFold applies the EqualFold predicate on the "data" field.
func DataEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldData, v))
}

// DataContainsFold applies the ContainsFold predicate on the "data" field.
func DataContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldData, v))
}

// AttachmentEQ applies the EQ predicate on the "attachment" field.
func AttachmentEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldAttachment, v))
}

// AttachmentNEQ applies the NEQ predicate on the "attachment" field.
func AttachmentNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldAttachment, v))
}

// AttachmentIn applies the In predicate on the "attachment" field.
func AttachmentIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldAttachment, vs...))
}

// AttachmentNotIn applies the NotIn predicate on the "attachment" field.
func AttachmentNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldAttachment, vs...))
}

// AttachmentGT applies the GT predicate on the "attachment" field.
func AttachmentGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldAttachment, v))
}

// AttachmentGTE applies the GTE predicate on the "attachment" field.
func AttachmentGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldAttachment, v))
}

// AttachmentLT applies the LT predicate on the "attachment" field.
func AttachmentLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldAttachment, v))
}

// AttachmentLTE applies the LTE predicate on the "attachment" field.
func AttachmentLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldAttachment, v))
}

// AttachmentContains applies the Contains predicate on the "attachment" field.
func AttachmentContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldAttachment, v))
}

// AttachmentHasPrefix applies the HasPrefix predicate on the "attachment" field.
func AttachmentHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldAttachment, v))
}

// AttachmentHasSuffix applies the HasSuffix predicate on the "attachment" field.
func AttachmentHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldAttachment, v))
}

// AttachmentEqualFold applies the EqualFold predicate on the "attachment" field.
func AttachmentEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldAttachment, v))
}

// AttachmentContainsFold applies the ContainsFold predicate on the "attachment" field.
func AttachmentContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldAttachment, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int64) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int64) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int64) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int64) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldUserID, v))
}

// WorkspaceIDEQ applies the EQ predicate on the "workspace_id" field.
func WorkspaceIDEQ(v int64) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldWorkspaceID, v))
}

// WorkspaceIDNEQ applies the NEQ predicate on the "workspace_id" field.
func WorkspaceIDNEQ(v int64) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldWorkspaceID, v))
}

// WorkspaceIDIn applies the In predicate on the "workspace_id" field.
func WorkspaceIDIn(vs ...int64) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldWorkspaceID, vs...))
}

// WorkspaceIDNotIn applies the NotIn predicate on the "workspace_id" field.
func WorkspaceIDNotIn(vs ...int64) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldWorkspaceID, vs...))
}

// WorkspaceIDGT applies the GT predicate on the "workspace_id" field.
func WorkspaceIDGT(v int64) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldWorkspaceID, v))
}

// WorkspaceIDGTE applies the GTE predicate on the "workspace_id" field.
func WorkspaceIDGTE(v int64) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldWorkspaceID, v))
}

// WorkspaceIDLT applies the LT predicate on the "workspace_id" field.
func WorkspaceIDLT(v int64) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldWorkspaceID, v))
}

// WorkspaceIDLTE applies the LTE predicate on the "workspace_id" field.
func WorkspaceIDLTE(v int64) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldWorkspaceID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Message) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		p(s.Not())
	})
}
